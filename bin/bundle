#!/usr/bin/env ruby
# frozen_string_literal: true

#
# This file was generated by Bundler.
#
# The application 'bundle' is installed as part of a gem, and
# this file is here to facilitate running it.
#

require 'rubygems'

m = Module.new do
  module_function

  def invoked_as_script?
    File.expand_path($PROGRAM_NAME) == File.expand_path(__FILE__)
  end

  def env_var_version
    ENV['BUNDLER_VERSION']
  end

  def cli_arg_version
    return unless invoked_as_script? # Don't hijack other binstubs
    return unless 'update'.start_with?(ARGV.first || ' ') # Must be running `bundle update`

    bundler_version = extract_version_from_args
    bundler_version || extract_version_with_update
  end

  # Helper method to extract version when updating
  def extract_version_with_update
    update_index = nil
    ARGV.each_with_index do |arg, i|
      next unless arg =~ /\A--bundler(?:[= ](#{Gem::Version::VERSION_PATTERN}))?\z/

      update_index = i
      return Regexp.last_match(1)
    end
    nil
  end

  # Helper method to find version in command arguments
  def extract_version_from_args
    ARGV.each_with_index do |arg, i|
      next unless update_index && update_index.succ == i

      return arg if arg.match?(Gem::Version::ANCHORED_VERSION_PATTERN)
    end
    nil
  end

  def gemfile
    gemfile = ENV['BUNDLE_GEMFILE']
    return gemfile if gemfile && !gemfile.empty?

    File.expand_path('../Gemfile', __dir__)
  end

  def lockfile
    lockfile =
      case File.basename(gemfile)
      when 'gems.rb' then gemfile.sub(/\.rb$/, '.locked')
      else "#{gemfile}.lock"
      end
    File.expand_path(lockfile)
  end

  def lockfile_version
    return unless File.file?(lockfile)

    lockfile_contents = File.read(lockfile)
    return unless lockfile_contents =~ /\n\nBUNDLED WITH\n\s{2,}(#{Gem::Version::VERSION_PATTERN})\n/

    Regexp.last_match(1)
  end

  def bundler_requirement
    @bundler_requirement ||=
      env_var_version ||
      cli_arg_version ||
      bundler_requirement_for(lockfile_version)
  end

  def bundler_requirement_for(version)
    return "#{Gem::Requirement.default}.a" unless version

    bundler_gem_version = Gem::Version.new(version)

    bundler_gem_version.approximate_recommendation
  end

  def load_bundler!
    ENV['BUNDLE_GEMFILE'] ||= gemfile

    activate_bundler
  end

  def activate_bundler
    ENV['BUNDLE_GEMFILE'] ||= gemfile
    gem_error = activation_error_handling { gem 'bundler', bundler_requirement }
    return if gem_error.nil?

    require_error = activation_error_handling { require 'bundler/version' }
    check_version_compatibility(gem_error, require_error)
  end

  # Extract compatibility check into helper to reduce method length
  def check_version_compatibility(gem_error, require_error)
    if require_error.nil? && Gem::Requirement.new(bundler_requirement)
                                             .satisfied_by?(Gem::Version.new(Bundler::VERSION))
      return
    end

    display_bundler_warning(gem_error)
    exit 42
  end

  # Move warning message to a separate method to resolve line length issue
  def display_bundler_warning(gem_error)
    warn <<~WARNING
      Activating bundler (#{bundler_requirement}) failed:
      #{gem_error.message}

      To install the version of bundler this project requires, run
      `gem install bundler -v '#{bundler_requirement}'`
    WARNING
  end

  def activation_error_handling
    yield
    nil
  rescue StandardError, LoadError => e
    e
  end
end

m.load_bundler!

load Gem.bin_path('bundler', 'bundle') if m.invoked_as_script?
